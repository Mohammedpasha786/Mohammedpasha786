import cv2
import numpy as np
import mediapipe as mp

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.7, min_tracking_confidence=0.5)
mp_draw = mp.solutions.drawing_utils

# Define gesture classes and corresponding landmarks
gesture_classes = ["rock", "paper", "scissors", "lizard", "spock"]
gesture_landmarks = {
    "rock": [1, 2, 3, 4, 5, 17, 18, 19, 20],
    "paper": [1, 2, 3, 4, 5, 9, 10, 11, 12],
    "scissors": [1, 2, 3, 4, 5, 8, 9, 10, 11],
    "lizard": [1, 2, 3, 4, 5, 13, 14, 15, 16],
    "spock": [1, 2, 3, 4, 5, 17, 18, 19, 20, 8, 9, 10, 11]
}

# Function to extract gesture features
def extract_gesture_features(landmarks):
    features = []
    for landmark_index in gesture_landmarks["rock"]:
        x, y = landmarks[landmark_index].x, landmarks[landmark_index].y
        features.extend([x, y])
    return np.array(features)

# Function to classify gesture
def classify_gesture(features, model):
    predicted_class = model.predict(features.reshape(1, -1))
    return predicted_class[0]

# Load pre-trained model (replace with your model path)
model = load_your_pre_trained_model()

# Capture video from webcam
cap = cv2.VideoCapture(0)

while True:
    success, image = cap.read()
    if not success:
        break

    # Convert image to RGB
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Process image with MediaPipe Hands
    results = hands.process(image)

    # Draw hand landmarks
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Extract gesture features and classify
            features = extract_gesture_features(hand_landmarks.landmark)
            predicted_class = classify_gesture(features, model)

            # Display predicted gesture
            cv2.putText(image, f"Predicted Gesture: {gesture_classes[predicted_class]}", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display image
    cv2.imshow('Hand Gesture Recognition', image)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
