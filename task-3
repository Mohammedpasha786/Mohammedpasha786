# Import necessary libraries
import os
import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Define image size and dataset path
img_size = 64
cat_folder = 'path/to/cat_images'
dog_folder = 'path/to/dog_images'

# Function to load images and create a dataset
def load_images(folder, label):
    images = []
    labels = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path, cv2.IMREAD_COLOR)
        if img is not None:
            img_resized = cv2.resize(img, (img_size, img_size))
            images.append(img_resized.flatten())  # Flatten the image for SVM
            labels.append(label)
    return np.array(images), np.array(labels)

# Load cat images (label = 0) and dog images (label = 1)
cat_images, cat_labels = load_images(cat_folder, 0)
dog_images, dog_labels = load_images(dog_folder, 1)

# Combine data and labels
X = np.concatenate((cat_images, dog_images), axis=0)
y = np.concatenate((cat_labels, dog_labels), axis=0)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the SVM model
svm_model = SVC(kernel='linear')  # You can try other kernels like 'rbf'
svm_model.fit(X_train, y_train)

# Predict on the test set
y_pred = svm_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy * 100:.2f}%")

# You can also predict on new images
# img = cv2.imread('path/to/new_image')
# img_resized = cv2.resize(img, (img_size, img_size)).flatten()
# prediction = svm_model.predict([img_resized])
# print("Prediction (0=cat, 1=dog):", prediction)

